<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mh.mapper.UserMapper">

    <!--
    默认情况下，只启用了本地的会话缓存，它仅仅对一个会话中的数据进行缓存。
    要启用全局的二级缓存，只需要在你的 SQL 映射文件中添加一行：

    基本上就是这样。这个简单语句的效果如下:
        映射语句文件中的所有 select 语句的结果将会被缓存。
        映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。
        缓存会使用最近最少使用算法（LRU, Least Recently Used）算法来清除不需要的缓存。
        缓存不会定时进行刷新（也就是说，没有刷新间隔）。
        缓存会保存列表或对象（无论查询方法返回哪种）的 1024 个引用。
        缓存会被视为读/写缓存，这意味着获取到的对象并不是共享的，可以安全地被调用者修改，而不干扰其他调用者或线程所做的潜在修改。
     -->
    <cache type="mh.cache.MyCache"/>

    <!--当前命名空间的缓存的修改，触发其他命名空间的缓存触发-->
    <!-- <cache-ref namespace="AA,BB"/>-->

    <!--parameterMap解析-->

    <!--sql片段-->
    <sql id="selectSql">
        select * from user ;
    </sql>

    <resultMap id="baseResult" type="mh.bean.User">
        <id property="id" column="id" jdbcType="INTEGER" javaType="int"/>
        <!--如果涉及到复杂的参数值，看zz-mybatis的项目配置
            https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#Result_Maps
        -->
    </resultMap>

    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into
        user (username,sex,birthday,address)
        values
        (#{username},#{sex},#{birthday},#{address})
    </insert>


    <select id="selectUser" resultType="mh.bean.User">
    select * from USER where id = #{id}
  </select>
</mapper>